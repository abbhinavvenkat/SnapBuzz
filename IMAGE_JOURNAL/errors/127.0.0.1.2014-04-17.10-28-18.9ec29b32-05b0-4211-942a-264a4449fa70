(dp1
S'output'
p2
S"<type 'exceptions.IndexError'> list index out of range"
p3
sS'layer'
p4
S'/home/user/Documents/web2py/applications/IMAGE_JOURNAL/controllers/default.py'
p5
sS'code'
p6
S'"""This is the registration controller"""\ndef register():\n\trecord = db.register(request.args(0))\n\tform = SQLFORM(db.register,record)\n\t\n\tif form.accepts(request,session,hideerror = True):\n\t\t\tresponse.flash = \'Thanks the form has been accepted\'\n\t\t\tredirect(URL(\'default\',\'login\'))\n\telif form.errors:\n\t\tresponse.flash = \'please fill the form correctly\'\n\telse:\n\t\tresponse.flash = \'please fill the form\'\n\treturn dict(form = form,x = form.vars.id)\n\n\n"""This function can be used to see any database. This is only for developer use"""\ndef all_records():\n      grid = SQLFORM.grid(db.Album_by_tag,user_signature=False)\n      return dict(grid = grid)\n\n\n\n\n"""This function can be used to delete all the entries of a database. This is only for developer use"""\ndef delete():\n\tresponse.flash = "records are being deleted"\n\tdb(db.Comments.comment != None).delete()\n\n\n\n"""This is the login function. This will create a session for the logged in user"""\ndef login():\n\timport random\n\tform = SQLFORM(db.login)\n\tform.custom.submit[\'_id\'] = "buttonstyle"\n\tif form.accepts(request,session,hideerror = True):\n\t\tif(form.vars.Password == db(db.register.Email == form.vars.Email).select()[0].Password):\n\t\t\tresponse.flash = "you have successfully logged in"\n\t\t\tx = str(random.randint(1000000,10000000))\n\t\t\tdb(db.login.id == form.vars.id).update(session_id = x, session_status = 1)\n\t\t\tredirect(URL(\'timeline/\'+x))\n\t\telse:\n\t\t\tresponse.flash = "Sorry wrong password"\n\t\t\tname = "Stranger"\n\telif form.errors:\n\t\tsession.flash = "You have to first Register"\n\t\tname = "Guest"\n\t\tredirect(URL(\'register\'))\n\telse:\n\t\tresponse.flash = "Please fill in your login details"\n\t\tname = "Guest"\n\treturn dict(form = form,name = name)\n\ndef about():\n\tsession_id = request.args[0]\n\treturn locals()\n\ndef contact():\n\tsession_id = request.args[0]\n\treturn locals()\n\ndef credits():\n\tsession_id = request.args[0]\n\treturn locals()\n\ndef timeline():\n\tsession_id = request.args[0]\n        r = check(session_id)\n\tif(r == \'0\'):\n\t\tresponse.flash = "hello world"\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\t\t\n\trows = db(db.Image.owner == name).select(orderby=~db.Image.id)\n\tids = []\t\n\n\tfor i in rows:\n\t\tr = db(db.Albums.album_name == i.album).select()\n\t\tfor j in r:\n\t\t\tids.append(j.id)\n\tfundates = []\n\t\n\timport datetime\n\tfrom gluon.tools import prettydate\n\n\tfor i in rows:\t\n\t\td = (i.created_on)\n\t\tpretty_d = prettydate(d,T)\n\t\tfundates.append(pretty_d)\t\t\n\n\treturn locals()\n\n\t\n"""This is for the home page of the user"""\ndef user():\n\tsession_id = request.args[0]\n        r = check(session_id)\n\tif(r == \'0\'):\n\t\tresponse.flash = "hello world"\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\tresponse.flash = "Welcome " + name\n\treturn dict(name = name,session_id = session_id)\n\n\n\n"""Using this controller the user can add an album in his database"""\ndef add_album():\n\tmsg = "welcome"\n\targs = request.args\n\tsession_id = args[0]\n\tr = check(session_id)\n\tif(r == 0):\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\tresponse.flash = "Create Album" + name\t\n\trecord = db.Albums(request.args(0))\n\tform = SQLFORM(db.Albums,record)\n\tif form.accepts(request,session):\n\t\tdb(db.Albums.id == form.vars.id).update(owner = name)\n\t\tx = db(db.register.Email == name).select()[0].albums\n\t\tdb(db.register.Email == name).update(albums = x + [form.vars.id])\n\t\tredirect(URL(\'my_albums/\' + session_id))\t\t\n\tif form.errors:\n\t\tif(len(form.errors) == 1) and (form.errors.default1 == "enter a value"):\n\t\t\tmsg = "hello"\n\treturn dict(form = form,msg = msg,session_id = session_id)\n\n\n\n\n"""This will display all tehe albums of the logged in user"""\ndef my_albums():\n\targs = request.args\n\tsession_id= args[0]\n\tr = check(session_id)\n\tif(r == 0):\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\tresponse.flash = "Welcome " + name\n\talbums = []\n\timages = []\n\trows = db(db.register.Email == name).select()[0].albums\t\n\tfor i in rows:\n\t\trow = db(db.Albums.id == i).select()[0]\n\t\talbums.append(row.album_name)\n\t\tif(row.default1!=None):\n\t\t\timages.append(row.default1)\n\t\telse:\n\t\t\timage = db(db.Image.id == 28).select()[0]\n\t\t\timages.append(image)\n\t\t\tconsole.log(image)\n\trecord = db.Albums(request.args(0))\n\t\n\t\n\tform = SQLFORM(db.Albums,record)\n\tif form.accepts(request,session):\n\t\tdb(db.Albums.id == form.vars.id).update(owner = name)\n\t\tdb(db.Albums.id == form.vars.id).update(created_on = request.now)\n\t\tx = db(db.register.Email == name).select()[0].albums\n\t\tdb(db.register.Email == name).update(albums = x + [form.vars.id])\t\t\n\t\timage_id = db.Image.insert(image = form.vars.default1,created_on = request.now, album = form.vars.album_name,owner = name)\n\t\ty = db(db.Albums.id == form.vars.id).select()[0].images\n\t\t#db(db.Albums.id == form.vars.id).update(tags = [])\n\t\tdb(db.Albums.album_name == form.vars.album_name).update(images = y + [image_id])\n\t\tredirect(URL(\'my_albums/\' + session_id))\n\tif form.errors:\n\t\tresponse.flash = "sorry the album was not created"\t\n\treturn dict(albums = albums,name = name,images = images,ids = rows,session_id = session_id,form = form)\n\n\n"""This will display all the images of a paticular album"""\ndef display_album():\n\targs = request.args\n\tsession_id = request.args[0]\n\tr = check(session_id)\n\tif(r == 0):\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\talbum_name = request.args[1]\n\towner = request.args[2]\n\talbum_id = request.args[3]\n\tresponse.flash = "Welcome " + name\n\timages = []\n\trows = db(db.Albums.id == album_id).select()[0].images\n\tfor j in rows:\n\t\timages.append(db(db.Image.id == j).select()[0].image)\n\trecord = db.Image(request.args(0))\n\t\n\tform = SQLFORM(db.Image,record)\n\tif form.accepts(request,session):\n\t\tdb(db.Image.id==form.vars.id).update(album=album_name)\n\t\tdb(db.Image.id==form.vars.id).update(owner=name)\n\t\tdb(db.Image.id==form.vars.id).update(created_on=request.now)\n\t\trows = db(db.Albums.id == album_id).select()[0]\n\t\tx = rows.images\t\t\n\t\tdb(db.Albums.id == album_id).update(images = x + [form.vars.id])\n\t\tredirect(URL(\'display_album/\'+session_id+\'/\'+album_name+\'/\' +owner +\'/\' + album_id ))\n\telif form.errors:\n\t\tresponse.flash = "no image selected"\n\trecord2 = db.Tags(request.args(0))\n\tform2 = SQLFORM(db.Tags,record2)\n\tform2.custom.widget.tag[\'_id\'] = "tag_id"\n\tform2.custom.submit.update(_id="upload3",_value="Tag It")\n\t\n\tif form2.accepts(request,session):\n\t\tx = db(db.Albums.id == album_id).select()[0].tags\n\t\tif form2.vars.tag not in db(db.Albums.id == album_id).select()[0].tags:\n\t\t\tdb(db.Albums.id == album_id).update(tags = x + [form2.vars.tag])\n\t\t\tc = db(db.Album_by_tag.Tag == form2.vars.tag).count()\t\t\t\n\t\t\tif c == 0:\n\t\t\t\tdb.Album_by_tag.insert(Tag = form2.vars.tag,albums = [])\t\t\t\t\n\t\t\ty = db(db.Album_by_tag.Tag == form2.vars.tag).select()[0].albums\n\t\t\t\n\t\tif((int(album_id) in y) == False):\n\t\t\ty.append(album_id)\t\t\t\n\t\t\tdb(db.Album_by_tag.Tag == form2.vars.tag).update(albums = y)\n\n\t\tdb(db.Tags.id == form2.vars.id).delete()\t\t\n\t\n\trecord3 = db.Albums(request.args(0))\n\tform3 = SQLFORM(db.Albums,record3)\t\n\t\n\tif form3.accepts(request,session):\n\t\tdb(db.Albums.id == album_id).update(permission = form3.vars.per)\n\telif form3.errors:\n\t\tresponse.flash = "INVALID SELECTION"\t\n\t\t\n\n\treturn dict(form3 = form3, form = form,form2 = form2,images = images,album_name = album_name,name  = name,owner = owner,session_id = session_id, album_id = album_id)\n\ndef test():\n\treturn locals()\n\n"""This will display the clicked image and the comments on that image"""\ndef display_image():\n\targs = request.args\n\tsession_id = request.args[0]\n\tr = check(session_id)\n\tif(r == 0):\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\tresponse.flash = "Welcome "+ name\n\n\talbum = request.args[1]\n\timage = request.args[2]\n\towner = request.args[3]\n\talbum_id = request.args[4]\n\n\talbum_name = album\n\n\trow = db(db.Image.image == image).select()[0]\n\towner = row.owner\n\timage_id1 = row.id\n\t\n\tnew = db(db.Albums.id == album_id).select()[0]\n\tpics = new.images\n\t\n\ti = 0\n\tprev_id = image_id1\n\tnext_id = image_id1\n\n\tfor i in range(0,len(pics)):\n\t\tif image_id1 == pics[i]:\n\t\t\tif i > 0:\n\t\t\t\tprev_id = pics[i-1]\n\t\t\telse:\n\t\t\t\tprev_id = pics[i]\n\t\t\n\t\t\tif i < len(pics)-1:\t\t\t\n\t\t\t\tnext_id = pics[i+1]\n\t\t\telse:\n\t\t\t\tnext_id = pics[i]\n\t\t\tbreak\n\n\tp = db(db.Image.id == prev_id).select()\n\tfor j in p:\n\t\tprevimage = j.image \n\n\tn = db(db.Image.id == next_id).select()\n\tfor j in n:\n\t\tnextimage = j.image \n\t\n\trecord = db.register(request.args(0))\n\tform = SQLFORM(db.Comments,record)\n\n\t\n\tform.custom.widget.comment[\'_id\'] = "feedback"\n\tform.custom.widget.comment[\'_placeholder\'] = "Comment here ..."\n\tform.custom.widget.comment[\'_type\'] = "textarea"\n\t\n\tform.custom.submit[\'_id\'] = "postcomment"\n\tform.custom.submit[\'_value\'] = "Post Comment"\t\n\n\tif form.accepts(request,session):\n\t\tdb(db.Comments.id == form.vars.id).update(commentator = name)\n\t\tdb(db.Comments.id == form.vars.id).update(image_id = image_id1)\n\t\tdb(db.Comments.id == form.vars.id).update(created_on = request.now)\n\t\t#if(owner!=name):\n\t\t#\tdb(db.Comments.id == form.vars.id).update(comment_status = 0)\n\t\t#\tarr = db(db.register.Email == owner).select()[0].requests\n\t\t#\tdb(db.register.Email == owner).update(requests = arr + [form.vars.id])\n\t\t#else:\n\t\tdb(db.Comments.id == form.vars.id).update(comment_status = 1)\n\trows = db(db.Comments.image_id == image_id1).select()\n\tcommentator = []\n\tcomment = []\n\tfundates = []\n\t\n\timport datetime\n\tfrom gluon.tools import prettydate\t\n\n\tfor i in rows:\n\t\tif(int(i.comment_status) == 1):\n\t\t\tcommentator.append(i.commentator)\n\t\t\tcomment.append(i.comment)\n\t\t\td = (i.created_on)\n\t\t\tpretty_d = prettydate(d,T)\n\t\t\tfundates.append(pretty_d)\t\n\t\t\t\n\tperson_name_first = []\n\tperson_name_last = []\n\n\tfor i in range(0,len(commentator)):\n\t\tperson = db(db.register.Email == commentator[i]).select()[0].First_Name\n\t\tperson_2 = db(db.register.Email == commentator[i]).select()[0].Last_Name\n\t\tperson_name_first.append(person)\n\t\tperson_name_last.append(person_2)\n\n\treturn dict( previmage = previmage, nextimage = nextimage, fundates = fundates,image = image,owner = owner, album_id = album_id, album_name = album_name, form = form,commentator = commentator,comment = comment,session_id = session_id, person_name_first = person_name_first, person_name_last = person_name_last)\n\n\n"""This will display all the albums whose permission  has been set to public"""\ndef public_albums():\n\trows = db((db.Albums.album_name!=None) & (db.Albums.permission == \'PUBLIC\')).select()\n\targs = request.args\n\tsession_id = request.args[0]\n\tr = check(session_id)\n\tif(r == 0):\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\talbum_name = []\n\towners = []\n\timages = []\n\tids = []\n\tfor i in rows:\n\t\talbum_name.append(i.album_name)\n\t\timages.append(i.default1)\n\t\towners.append(i.owner)\t\n\t\tids.append(i.id)\t\n\treturn dict(albums = album_name,owners = owners, images = images,name = name,ids = ids,session_id = session_id)\n\ndef tagged_albums():\n\targs = request.args\n\tsession_id = args[0]\n\ttag = args[1]\n\t\n\tr = check(session_id)\n\tif(r == 0):\n\t\tredirect(URL(\'not_logged_in\'))\n\tname = get_name(session_id)\n\t\n\tl = [\'Nature\',\'Travel\',\'Entertainment\',\'Work\',\'Others\']\n\ttag_name = l[int(tag)]\t\n\t\n\talbums = []\n\towners = []\n\timages = []\n\tids = []\n\talbum_ids = []\n\n\tab = db(db.Album_by_tag.Tag == l[int(tag)]).select()\n\t\n\tfor i in ab:\n\t\tfor j in i.albums:\t\t\n\t\t\talbum_ids.append(j)\n\n\tfor i in album_ids:\n\t\trows = db((db.Albums.id == i) & (db.Albums.permission == \'PUBLIC\')).select() \n\t\tfor j in rows:\n\t\t\talbums.append(j.album_name)\n\t\t\timages.append(j.default1)\n\t\t\towners.append(j.owner)\n\t\t\tids.append(j.id)\n\n\treturn locals()\n\t\ndef download():\n        return response.download(request, db)\n\t\ndef get_name(session_id):\n\treturn db(db.login.session_id == session_id).select()[0].Email\n\n"""This function checks if the given session is valid or not"""\ndef check(session_id):\n\tx = db(db.login.session_id == session_id).select()\n\tif(len(x) == 0):\n\t\treturn 0\n\telse :\n\t\treturn x[0].session_status\n\t\t\ndef not_logged_in():\n\tresponse.flash = "Sorry You Are Not Logged In"\n\treturn dict()\n\ndef logout():\n\tsession_id = request.args[0]\n\tx = db(db.login.session_id == session_id).select()\n\tif(len(x) == 0):\n\t\tredirect(URL(\'not_logged_in\'))\n\telse:\n\t\tdb(db.login.session_id == session_id).update(session_status = 0)\n\t\tredirect(URL(\'default\',\'login\'))\n\treturn dict()\n\n"""This function will show all the requests for comments"""\ndef requests():\n\tsession_id = request.args[0]\n\tname = get_name(session_id)\n\trequests = db(db.register.Email == name).select()[0].requests\n\tresponse.flash = requests\n\tcomments = []\n\tcommentators = []\n\tids = []\n\tfor i in requests:\n\t\tx = db(db.Comments.id == i).select()[0]\n\t\tcomments.append(x.comment)\n\t\tcommentators.append(x.commentator)\n\t\tids.append(i)\n\treturn dict(session_id = session_id,comments = comments,commentators = commentators,ids = ids)\n\ndef validate_comment():\n\tsession_id = request.args[0]\n\tcomment_id = request.args[1]\n\tdb(db.Comments.id == int(comment_id)).update(comment_status = 1)\n\tx = db(db.Comments.id == comment_id).select()[0]\n\timage_id = x.image_id\n\towner = db(db.Image.id == image_id).select()[0].owner\n\ty = db(db.register.Email == owner).select()[0].requests\n\ty = y.remove(int(comment_id))\n\tdb(db.register.Email == owner).update(requests = y)\n\tredirect(URL(\'requests/\' + session_id) )\n\treturn dict()\n\n\nresponse._vars=response._caller(about)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/user/Documents/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/user/Documents/web2py/applications/IMAGE_JOURNAL/controllers/default.py", line 446, in <module>\n  File "/home/user/Documents/web2py/gluon/globals.py", line 385, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/user/Documents/web2py/applications/IMAGE_JOURNAL/controllers/default.py", line 55, in about\n    session_id = request.args[0]\nIndexError: list index out of range\n'
p11
s.